@page "/"
@rendermode InteractiveServer
@using System.Reflection.Metadata
@using Labb2_WebDev2._0.Dataccess
@using Labb2_WebDev2._0.Dataccess.Entities
@using Labb2_WebDev2._0.Shared.DTOs
@using Labb2_WebDev2._0.Shared.Interfaces
@using WebApp.Services
@inject IHttpClientFactory _httpClientFactory
@inject IProductService<ProductDTO> ProductService

<PageTitle>Products</PageTitle>

<header class="header">
    <h1>Products</h1>
</header>

<div class="spacer"></div>

<div class="AddNewProduct">
    <h3>New product</h3>
    <InputText class="form-control col" placeholder="Name" @bind-Value="newProductName"></InputText>
    <InputText class="form-control col" placeholder="EAN" @bind-Value="newProductEAN"></InputText>
    <InputText class="form-control col" placeholder="Price" @bind-Value="newProductPrice"></InputText>
    <InputText class="form-control col" placeholder="Category" @bind-Value="newProductCategory"></InputText>
    <InputText class="form-control col" placeholder="Description" @bind-Value="newProductDescription"></InputText>
    <button class="btn btn-outline-success" type="submit" @onclick="( ()=> AddProduct())">Add new product</button>
</div>

<div class="spacer"></div>

<div class="container text-center m-2">
    <div class="row row-cols-auto">
        <InputText class="form-control col" placeholder="Search product with EAN" @bind-Value="searchText"></InputText>
        <button class="btn btn-outline-secondary" type="submit" @onclick="SearchProducts">Search</button>
        <button class="btn btn-outline-secondary" type="submit" @onclick="DisplayUpdate">Reset</button>
    </div>
</div>

<div  class="dbProducts container">
    <div class="row">
        @foreach (var products in DbProducts)
        {
            <div class="card col-3" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">@products.Name</h5>
                    <h6 class="card-subtitle mb-2 text-body-secondary">EAN : @products.EAN</h6>
                    <h6 class="card-subtitle mb-2 text-body-secondary">Category: @products.Category</h6>
                    <p class="card-text">Price: @products.Price kr</p>
                    <p class="card-text">@products.Description</p>

                    @* <button class="removeProductBtn btn btn-outline-secondary" @onclick="( ()=> RemoveProduct(products))">Remove</button> *@
                    @if (products.Discontinued == true)
                    {
                        <p class="discontinuedProduct">Discontinued !</p>
                    }
                    else
                    {
                        <button class="updateProductBtn btn btn-outline-secondary" @onclick="( ()=> UpdateProductStatus(products.ProductID))">Update</button>
                    }
                </div>
            </div>
        }
    </div>
</div>


<script>
    
</script>


<style>
    h1 {
        text-align: center;
        font-family: Consolas;
        color: rebeccapurple;
    }

    .header {
        margin: 20px;
    }

    .spacer {
        height: 50px;
    }

    .searchLabel {
        width: 100px;
        font-family: 'Yu Gothic';
        font-size: 20px;
    }

    .form-control {
        width: 450px;
    }

    .productTitles {
        background-color: lightgrey;
        font-family: 'Yu Gothic';
        font-size: 20px;
    }

    .productList {
        font-family: 'Yu Gothic';
        font-size: 18px;
    }

    .discontinuedItem {
        color: red;
        font-weight: bolder;
    }

    .updateProductBtn {
        color: forestgreen;
    }

    .removeProductBtn {
        color: red
    }

    .discontinuedProduct {
        color: white;
        background-color: red;
        text-align :center;
    }
</style>


@code
{
    public string 
        searchText,
        newProductName,
        newProductEAN,
        newProductPrice,
        newProductCategory,
        newProductDescription,
        newProductStatus 
            = String.Empty;

    private ProductDTO newProduct { get; set; } 
    public List<ProductDTO> DbProducts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        DbProducts.AddRange(await ProductService.GetAllProducts());

        await base.OnInitializedAsync();
    }

    private async Task DisplayUpdate()
    {
        searchText = String.Empty;

        newProductName = String.Empty;
        newProductEAN = String.Empty;
        newProductPrice = String.Empty;
        newProductCategory = String.Empty;
        newProductDescription = String.Empty;
        newProductStatus = String.Empty;

        DbProducts.Clear();
        DbProducts.AddRange(await ProductService.GetAllProducts());
    }

    private async Task SearchProducts()
    {
        if (searchText is null)
        {
            return;
        }

        DbProducts.Clear();
        DbProducts.Add(await ProductService.GetProductByEAN(searchText));
    }

    private async Task AddProduct()
    {
        newProduct = new ProductDTO()
        {
            Name = newProductName,
            EAN = newProductEAN,
            Price = float.Parse(newProductPrice),
            Category = newProductCategory,
            Description = newProductDescription,
            Discontinued = false
        };
        await ProductService.AddProduct(newProduct);
        await DisplayUpdate();
    }

    private async Task UpdateProductStatus(int id)
    {
        var product = await ProductService.GetProductById(id);
        if (product != null)
        {
            product.Discontinued = true;
        }

        await ProductService.UpdateProductStatus(id);
        await DisplayUpdate();
    }

    private async void RemoveProduct(ProductDTO removeProduct)
    {
        var product = await ProductService.GetProductById(removeProduct.ProductID);
        if (product != null)
        {
            return;
        }
        await ProductService.DeleteProduct(product.ProductID);
        DisplayUpdate();
    }
}