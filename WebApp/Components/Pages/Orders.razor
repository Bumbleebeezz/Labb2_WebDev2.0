@page "/orders"
@using Labb2_WebDev2._0.Shared.DTOs
@using Labb2_WebDev2._0.Shared.Interfaces
@using WebApp.Services
@rendermode InteractiveServer
@inject ICustomerService<CustomerDTO> CustomerServices
@inject IProductService<ProductDTO> ProductServices
@inject IOrderService<OrderDTO> OrderServices

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

<div class="spacer"></div>

<div class="dbProducts container">
    <div class="row">
        @foreach (var customers in DbCustomers)
        {
            <div class="card col-3" style="width: 25rem;">
                <div class="card-body">
                    <h5 class="card-title">@customers.Firstname @customers.Lastname</h5>
                    <button class="updateProductBtn btn btn-outline-secondary" @onclick="( ()=> PlaceOrder(customers.CustomerID))">Place random order</button>
                </div>
            </div>
        }
    </div>
</div>

<div class="spacer"></div>

<div class="container text-center m-2">
    <div class="row row-cols-auto">
        <InputText class="form-control col" placeholder="Search Order by ID" @bind-Value="searchText"></InputText>
        <button class="btn btn-outline-secondary" type="submit" @onclick="SearchOrders">Search</button>
        <button class="btn btn-outline-secondary" type="submit" @onclick="DisplayUpdate">Reset</button>
    </div>
</div>

<div class="spacer"></div>

<h3>All orders</h3>
<div class="dbOrders container">
    <div class="row">
        @foreach (var orders in DbOrders)
        {
            <div class="card col-3" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Order ID : @orders.OrderID</h5>
                    <h5 class="card-title">Customer ID : @orders.CustomerID</h5>
                    @foreach (var product in orders.Products)
                    {
                        <ul>ProductID : @product</ul>
                    }
                </div>
            </div>
        }
    </div>
</div>

<div class="spacer"></div>


<style>
    h1 {
        text-align: center;
        font-family: Consolas;
        color: rebeccapurple;
    }

    .spacer {
        height: 50px;
    }

    .form-control {
        width: 450px;
    }
</style>

@code {

    private string searchText = String.Empty;
    public List<OrderDTO> DbOrders { get; set; } = new();
    public List<CustomerDTO> DbCustomers { get; set; } = new();
    public List<ProductDTO> DbProducts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        DbOrders.AddRange(await OrderServices.GetAllOrders());
        DbCustomers.AddRange(await CustomerServices.GetAllCustomers());
        DbProducts.AddRange(await ProductServices.GetAllProducts());

        await base.OnInitializedAsync();
    }

    private async Task SearchOrders()
    {
        if (searchText is null)
        {
            return;
        }

        var searchId = int.Parse(searchText);

        DbOrders.Clear();
        DbOrders.Add(await OrderServices.GetOrderById(searchId));
    }

    private async Task DisplayUpdate()
    {
        searchText = String.Empty;

        DbOrders.Clear();
        DbOrders.AddRange(await OrderServices.GetAllOrders());
    }

    private async Task PlaceOrder(int id)
    {
        List<int> randomOrder = new();
        var randomProducts = new Random();
        for (int i = 0; i <= 3; i++)
        {
            int randomProduct = randomProducts.Next(DbProducts.Count);
            randomOrder.Add(randomProduct);
        }

        OrderDTO newOrder = new();
        newOrder.CustomerID = id;
        newOrder.Products = randomOrder;

        await OrderServices.AddOrder(newOrder);
        DisplayUpdate();
    }
}
