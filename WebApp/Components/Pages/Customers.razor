@page "/customers"
@rendermode InteractiveServer
@using Labb2_WebDev2._0.Shared.DTOs
@using Labb2_WebDev2._0.Shared.Interfaces
@using WebApp.Services
@inject IHttpClientFactory _httpClientFactory
@inject ICustomerService<CustomerDTO> CustomerServices
@inject IOrderService<OrderDTO> OrderServices

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<div class="spacer"></div>

<div class="AddNewCustomer">
    <h3>New Customer</h3>
    <InputText class="form-control col" placeholder="Firstname" @bind-Value="newCustomerFirstname"></InputText>
    <InputText class="form-control col" placeholder="Lastname" @bind-Value="newCustomerLastname"></InputText>
    <InputText class="form-control col" placeholder="Address" @bind-Value="newCustomerAddress"></InputText>
    <InputText class="form-control col" placeholder="Email" @bind-Value="newCustomerEmail"></InputText>
    <InputText class="form-control col" placeholder="Phone" @bind-Value="newCustomerPhone"></InputText>
    <button class="btn btn-outline-success" type="submit" @onclick="( ()=> AddCustomer())">Add new customer</button>
</div>

<div class="spacer"></div>

<div class="UpdateCustomer">
    <h3>Update Customer</h3>
    <InputText class="form-control col" placeholder="Firstname" @bind-Value="updateCustomerFirstname"></InputText>
    <InputText class="form-control col" placeholder="Lastname" @bind-Value="updateCustomerLastname"></InputText>
    <InputText class="form-control col" placeholder="Address" @bind-Value="updateCustomerAddress"></InputText>
    <InputText class="form-control col" placeholder="Email" @bind-Value="updateCustomerEmail"></InputText>
    <InputText class="form-control col" placeholder="Phone" @bind-Value="updateCustomerPhone"></InputText>
    <p></p>
</div>

<div class="spacer"></div>

<div class="container text-center m-2">
    <div class="row row-cols-auto">
        <InputText class="form-control col" placeholder="Search customer with Email" @bind-Value="searchText"></InputText>
        <button class="btn btn-outline-secondary" type="submit" @onclick="SearchCustomers">Search</button>
        <button class="btn btn-outline-secondary" type="submit" @onclick="DisplayUpdate">Reset</button>
    </div>
</div>

<div class="spacer"></div>

<div class="dbProducts container">
    <div class="row">
        @foreach (var customers in DbCustomers)
        {
            <div class="card col-4" style="width: 25rem;">
                <div class="card-body">
                    <h5 class="card-title">@customers.Firstname</h5>
                    <h5 class="card-title">@customers.Lastname</h5>
                    <p class="card-text">Address : @customers.Address</p>
                    <p class="card-text">Email : @customers.Email</p>
                    <p class="card-text">Phone : @customers.Phone</p>
                    <button class="updateProductBtn btn btn-outline-secondary" @onclick="( ()=> UpdateCustomer(customers.CustomerID))">Update customer</button>
                </div>
            </div>
        }
    </div>
</div>

<script>
    
</script>

<style>
    h1 {
        text-align: center;
        font-family: Consolas;
        color: rebeccapurple;
    }

    .spacer {
        height: 50px;
    }

    .searchLabel {
        width: 100px;
        font-family: 'Yu Gothic';
        font-size: 20px;
    }

    .form-control {
        width: 400px;
    }
</style>

@code {

    public string
        searchText,
        newCustomerFirstname,
        newCustomerLastname,
        newCustomerAddress,
        newCustomerEmail,
        newCustomerPhone,
        updateCustomerFirstname,
        updateCustomerLastname,
        updateCustomerAddress,
        updateCustomerEmail,
        updateCustomerPhone
            = String.Empty;

    private CustomerDTO newCustomer { get; set; }
    private CustomerDTO updateCustomer { get; set; }
    public List<CustomerDTO> DbCustomers { get; set; } = new();
    public List<ProductDTO> DbProducts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        DbCustomers.AddRange(await CustomerServices.GetAllCustomers());

        await base.OnInitializedAsync();
    }

    private async Task DisplayUpdate()
    {
        searchText = String.Empty;
        
        newCustomerFirstname = String.Empty;
        newCustomerLastname = String.Empty;
        newCustomerAddress = String.Empty;
        newCustomerEmail = String.Empty;
        newCustomerPhone = String.Empty;

        updateCustomerFirstname = String.Empty;
        updateCustomerLastname = String.Empty;
        updateCustomerAddress = String.Empty;
        updateCustomerEmail = String.Empty;
        updateCustomerPhone = String.Empty;

        DbCustomers.Clear();
        DbCustomers.AddRange(await CustomerServices.GetAllCustomers());
    }

    private async Task AddCustomer()
    {
        newCustomer = new CustomerDTO()
            {
                Firstname = newCustomerFirstname,
                Lastname = newCustomerLastname,
                Address = newCustomerAddress,
                Email = newCustomerEmail,
                Phone = newCustomerPhone
            };
        await CustomerServices.AddCustomer(newCustomer);
        await DisplayUpdate();
    }

    private async Task SearchCustomers()
    {
        if (searchText is null)
        {
            return;
        }

        DbCustomers.Clear();
        DbCustomers.Add(await CustomerServices.GetCustomerByEmail(searchText));
    }

    

    private async Task UpdateCustomer(int id)
    {
        updateCustomer = new CustomerDTO()
        {
            CustomerID = id,
            Firstname = updateCustomerFirstname,
            Lastname = updateCustomerLastname,
            Address = updateCustomerAddress,
            Email = updateCustomerEmail,
            Phone = updateCustomerPhone
        };

        await CustomerServices.UpdateCustomer(updateCustomer);
        DisplayUpdate();
    }
}
